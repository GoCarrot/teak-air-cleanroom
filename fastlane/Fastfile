# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
TEAK_APP_EXTENSIONS = ["TeakNotificationService", "TeakNotificationContent"]

#
# Configuration
#
CONFIG_TYPE = ENV.fetch('CONFIG_TYPE', 'development')
TEAK_AIR_CLEANROOM_BUNDLE_ID = ENV.fetch('TEAK_AIR_CLEANROOM_BUNDLE_ID', 'io.teak.app.air.dev')

USE_BUILTIN_AIR_NOTIFICATION_REGISTRATION = true
TEST_DISTRIQT = ENV.fetch('TEST_DISTRIQT', false)
TEST_DISTRIQT_NOTIF = ENV.fetch('TEST_DISTRIQT_NOTIF', false)

#
# Adobe AIR Helpers
#
ADOBE_AIR_HOME = ENV.fetch('ADOBE_AIR_HOME', '/usr/local/share/adobe-air-sdk')

def adt(*args)
  escaped_args = args.map { |arg| Shellwords.escape(arg) }.join(' ')
  sh "AIR_NOANDROIDFLAIR=true #{ADOBE_AIR_HOME}/bin/adt #{escaped_args}"
end

def amxmlc(*args)
  escaped_args = args.map { |arg| Shellwords.escape(arg) }.join(' ')
  sh "#{ADOBE_AIR_HOME}/bin/amxmlc #{escaped_args}"
end

def fastlane(*args)
  escaped_args = args.map { |arg| Shellwords.escape(arg) }.join(' ')
  sh "bundle exec fastlane #{escaped_args}"
end

#
# Lanes
#
default_platform(:ios)

desc "Copy or download the Teak SDK"
lane :sdk do
  version = teak_sdk(
    sdk: :air,
    destination: 'src/extensions/'
  )
  File.write(File.join("..", "TEAK_VERSION"), version)
end

platform :ios do
  before_all do
    setup_circle_ci
  end

  lane :build do
    # Build IPA
    Helper::TeakHelper.with_credentials_for(TEAK_AIR_CLEANROOM_BUNDLE_ID) do |p12_file, p12_password, mobileprovision|
      Dir.chdir('..') do
        adt "-package", "-target", "ipa-debug", #"-embedBitcode", "yes",
          "-keystore", p12_file, "-storetype", "pkcs12", "-storepass", p12_password,
          "-provisioning-profile", mobileprovision,
          "build/teak-air-cleanroom.ipa", "src/app.xml", "src/mm.cfg", "-C", "build", "teak-air-cleanroom.swf",
          "-C", "src/assets", "teak-ea-icon-square-1024x1024.png", "teak-ea-icon-square-144x144.png",
          "Default@2x.png", "Default-568h@2x.png", "-extdir", "src/extensions"
      end
    end

    # Re-sign IPA

    # Run match to fetch provisioning profiles, and fill ENV
    match

    # Grab Team Id
    team_id = ENV[Match::Utils.environment_variable_name_team_id(
      app_identifier: TEAK_AIR_CLEANROOM_BUNDLE_ID,
      type: CONFIG_TYPE
    )]

    # hax, should be determined some other way
    appex_version = '0.20.0'

    Dir.mktmpdir do |tmpdir|
      # Unzip IPA to tmpdir
      sh "unzip -q ../build/teak-air-cleanroom.ipa -d #{tmpdir}"
      FileUtils.rm '../build/teak-air-cleanroom.ipa'

      app_dir = File.basename(Dir.glob("#{tmpdir}/Payload/*.app").first)

      # Add/configure app extensions
      FileUtils.mkdir_p "#{tmpdir}/Payload/#{app_dir}/PlugIns"
      Dir.chdir("#{tmpdir}/Payload/#{app_dir}/PlugIns") do
        TEAK_APP_EXTENSIONS.each do |extension|
          # Per-extension bundle id
          app_extension_bundle_id = "#{TEAK_AIR_CLEANROOM_BUNDLE_ID}.#{extension}"
          # Download & Unzip extension
          sh "curl --fail -o \"#{extension}.appex.zip\" https://sdks.teakcdn.com/ios/#{extension}-#{appex_version}.appex.zip"
          sh "unzip \"#{extension}.appex.zip\""
          sh "rm \"#{extension}.appex.zip\""

          # Extract entitlements
          sh "codesign --display --entitlements :#{extension}.plist #{extension}.appex/"

          # Modify entitlements
          sh "plutil -replace \"application-identifier\" -string \"#{team_id}.#{app_extension_bundle_id}\" #{extension}.plist"
          sh "plutil -replace \"com\\.apple\\.developer\\.team-identifier\" -string \"#{team_id}\" #{extension}.plist"
          # TODO: com.apple.developer.associated-domains properly
          begin
            sh "plutil -remove \"com\\.apple\\.developer\\.associated-domains\" #{extension}.plist"
          rescue
          end

          # Remove _CodeSignature or re-sign will fail
          sh "rm -fr #{extension}.appex/_CodeSignature"

          # Modify Info.plist
          sh "plutil -replace CFBundleIdentifier -string \"#{app_extension_bundle_id}\" #{extension}.appex/Info.plist"

          # Re-sign extension, ad-hoc just to get modified entitlements back in there
          sh "codesign --force --sign \"-\" --entitlements #{extension}.plist #{extension}.appex"

          # Cleanup
          sh "rm #{extension}.plist"
        end
      end

      Dir.chdir(tmpdir) do
        # Re-zip
        sh "zip -qr teak-air-cleanroom.ipa Payload"

        # Cleanup
        sh "rm -r Payload/"
      end
      FileUtils.cp "#{tmpdir}/teak-air-cleanroom.ipa", '../build/teak-air-cleanroom.ipa'
    end

    # Build hash of provisioning profiles needed
    provisioning_profiles = {}
    provisioning_profile_env = Match::Utils.environment_variable_name_profile_path(
      app_identifier: TEAK_AIR_CLEANROOM_BUNDLE_ID,
      type: CONFIG_TYPE
    )
    provisioning_profiles[TEAK_AIR_CLEANROOM_BUNDLE_ID] = ENV[provisioning_profile_env]

    TEAK_APP_EXTENSIONS.each do |extension|
      app_extension_bundle_id = "#{TEAK_AIR_CLEANROOM_BUNDLE_ID}.#{extension}"
      provisioning_profile_env = Match::Utils.environment_variable_name_profile_path(
        app_identifier: app_extension_bundle_id,
        type: CONFIG_TYPE
      )
      provisioning_profiles[app_extension_bundle_id] = ENV[provisioning_profile_env]
    end

    # The 'resign' command calls a bash script located @ gems/fastlane-2.101.1/sigh/lib/assets/resign.sh
    resign(
      ipa: 'build/teak-air-cleanroom.ipa',
      signing_identity: "iPhone Developer: Teak Devices (U756J7538G)",
      use_app_entitlements: true,
      provisioning_profile: provisioning_profiles
    )
    FileUtils.cp '../build/teak-air-cleanroom.ipa', '../teak-air-cleanroom.ipa'
  end
end

platform :android do
  before_all do
    setup_circle_ci
  end

  lane :build do
    Helper::TeakHelper.with_kms_for("../kms/io.teak.app.air.jks.data",
                                    "../kms/store_encryption_key.key") do |file|
      Dir.chdir('..') do
        adt "-package", "-target", "apk-captive-runtime",
          "-keystore", file, "-storetype", "jks", "-alias", "dev", "-storepass", "pointless",
          "build/teak-air-cleanroom.apk", "src/app.xml", "src/mm.cfg", "-C", "build", "teak-air-cleanroom.swf",
          "-C", "src/assets", "teak-ea-icon-square-1024x1024.png", "teak-ea-icon-square-144x144.png",
          "Default@2x.png", "Default-568h@2x.png", "api_key.txt", "-extdir", "src/extensions"
      end
    end
  end

  lane :repack do
    #
    # Future-Pat: __FILE__ seems to not work in Fastfile
    #
    project_path = File.join(Dir.pwd, '..')

    Helper::TeakHelper.with_kms_for("../kms/io.teak.app.air.jks.data",
                                    "../kms/store_encryption_key.key") do |file|
      config_path = File.join(project_path, 'src', 'air-repack.config')

      File.write(config_path, """
android.build-tools = /usr/local/share/android-sdk/build-tools/25.0.2/
android.platform-tools = /usr/local/share/android-sdk/platform-tools/

temp.path = #{File.join(project_path, 'build', '_apktemp')}
temp.apk = #{File.join(project_path, 'build', '_temp.apk')}

input.apk = #{File.join(project_path, 'build', 'teak-air-cleanroom.apk')}
output.apk = #{File.join(project_path, 'teak-air-cleanroom.apk')}

debug.storetype = jks
debug.keystore = #{file}
debug.keypass = pointless
debug.alias = dev

release.storetype = jks
release.keystore = #{file}
release.keypass = pointless
release.alias = dev
""")
      sh "echo Signing package: #{TEAK_AIR_CLEANROOM_BUNDLE_ID}"
      sh "pointless | keytool -list -v -alias dev -keystore #{file}"

      Dir.chdir('../../teak-air/android/repacker/') do
        sh "ant -Duse-config=#{config_path} unpack patch xmlns_amazon enable_adm"
        FileUtils.cp_r "#{File.join(project_path, 'src', 'res')}", "#{File.join(project_path, 'build', '_apktemp')}"
        sh "ant -Duse-config=#{config_path} repack debug_sign zipalign"
      end
    end
  end
end
